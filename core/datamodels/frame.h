#pragma once

#include <FrameBuffer.h>

#include <cstdint>
#include <vector>

namespace NDIReceiver {

	struct NdiFrame {

		// The resolution of this frame.
		int xres;
		int yres;

		// What is the frame rate of this frame.
		// For instance NTSC is 30000,1001 = 30000/1001 = 29.97 fps.
		int frame_rate_N;
		int frame_rate_D;

		// What is the picture aspect ratio of this frame.
		// For instance 16.0/9.0 = 1.778 is 16:9 video
		// 0 means square pixels.
		float picture_aspect_ratio;

		// The timecode of this frame in 100-nanosecond intervals.
		int64_t timecode;

		// in bytes.  If the stride is 0, then it will default to sizeof(one pixel)*xres.
		int line_stride_in_bytes;

		// If the FourCC is a compressed type, then this will be the size of the p_data buffer in bytes.
		int data_size_in_bytes;

		// Per frame metadata for this frame. This is a NULL terminated UTF8 string that should be in XML format.
		// If you do not want any metadata then you may specify NULL here.
		const char* p_metadata; // Present in >= v2.5

		// This is only valid when receiving a frame and is specified as a 100-nanosecond time that was the exact
		// moment that the frame was submitted by the sending side and is generated by the SDK. If this value is
		// NDIlib_recv_timestamp_undefined then this value is not available and is NDIlib_recv_timestamp_undefined.
		int64_t timestamp; // Present in >= v2.5

		// The video data itself.
		FrameBuffer::Slot* p_data;

		~NdiFrame() { 
			p_data->locked = false; 
		}
	};


};
